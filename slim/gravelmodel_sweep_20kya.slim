//  SWEEP SIMULATION SCRIPT 20KYA - last updated 2024-02-22

// Keywords: migration, dispersal
// Model based on Gravel et al. 2011, doi:10.1073/pnas.1019276108 (hereafter "paper")

initialize() {
	// define input constants from command line
	if (exists("slimgui")) {
 		defineConstant("seed", 111111);
		defineConstant("gens", 0.0);
		defineConstant("allele_freq", 0.0);
 		defineConstant("pop", pop4);
		defineConstant("selCoeff", 0.0);
 		defineConstant("N", 1000); // sample about 1/7 of the population
 		defineConstant("run_name", 12345); 
		defineConstant("threshold", 0.0);
		defineConstant("direc", "/users/hsnell/data/hsnell/swifr/allscenarios_100sims/");
 	}

 	// setSeed(seed); 
	initializeMutationRate(2.36e-8); // theta=3813.75
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 1.0, "f", selCoeff);  // introduced mutation
	
	//initializeMutationType("m3", 1.0, "f", alpha_ceu);  // introduced mutation
	//initializeMutationType("m4", 1.0, "f", alpha_chb);  // introduced mutation
	
	m2.mutationStackPolicy = "f"; 	// m2 should not be overlapped by other mutations
	m2.color = "cyan"; // when run in the GUI, you can see the position of the intended mutation based on this color assignment
	m2.convertToSubstitution = F; // m2 will not become a substitution
	
	//m3.mutationStackPolicy = "f"; 	// m3 should not be overlapped by other mutations
	//m3.color = "red";
	//m3.convertToSubstitution = F; // m3 will not become a substitution
	
	//m4.mutationStackPolicy = "f"; 	// m4 should not be overlapped by other mutations
	//m4.color = "green";
	//m4.convertToSubstitution = F; // m4 will not become a substitution
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 499999); // paper uses 4.04e6, 5007837, etc.
	initializeRecombinationRate(1e-8);
	// print(selCoeff);
}

// INITIALIZE the ancestral African population of size 7310
1 early() { 
	defineConstant("simID", getSeed());
	sim.addSubpop("p1", asInteger(round(7310.370867595234))); 
} // paper rounds to 7310

// END BURN-IN period of 10*N=73104 generations (specific to SLiM recipe); EXPAND the African population
// This occurs (5919.131117 generations)*(25 years)=147978 yr ago; paper rounds to 5920 gens (148000 yr)
// Thus, simulation should end at generation 1+73104+5919.131117=79024
73105 early() { p1.setSubpopulationSize(asInteger(round(14474.54608753566))); } // paper rounds to 14474

// SPLIT Eurasians (p2) from Africans (p1) and SET UP MIGRATION between them
// This occurs 2056.396652 generations (51409.9163 years) ago; paper rounds to 2040 gens (51000 yr)
// Relative to beginning, this is generation 79024-2056.396652=76968
76968 early() {
	sim.addSubpopSplit("p2", asInteger(round(1861.288190027689)), p1); // paper rounds to 1861
	p1.setMigrationRates(c(p2), c(15.24422112e-5)); // paper rounds to 15e-5
	p2.setMigrationRates(c(p1), c(15.24422112e-5)); // paper rounds to 15e-5
}

// SPLIT p2 into European (p2) and East Asian (p3) subpopulations; RESIZE; SET UP MIGRATION between them
// This occurs 939.8072428 generations (23495.18107 years) ago; paper rounds to 920 gens (23000 yr)
// Relative to beginning, this is generation 79024-939.8072428=78084
78084 early() {
	sim.addSubpopSplit("p3", asInteger(round(553.8181989)), p2); // paper rounds to 554
	p2.setSubpopulationSize(asInteger(round(1032.1046957333444)));  // reduce European size; paper rounds to 1032

	// Set migration rates for the rest of the simulation
	p1.setMigrationRates(c(p2, p3), c(2.54332678e-5, 0.7770583877e-5)); // paper rounds to c(2.5e-5, 0.78e-5)
	p2.setMigrationRates(c(p1, p3), c(2.54332678e-5, 3.115817913e-5)); // paper rounds to c(2.5e-5, 3.11e-5)
	p3.setMigrationRates(c(p1, p2), c(0.7770583877e-5, 3.115817913e-5)); // paper rounds to c(0.78e-5, 3.11e-5)
}

// SET UP EXPONENTIAL GROWTH in Europe (p2) and East Asia (p3)
// Where N(0) is the base subpopulation size and t = gen - 78084:
//    N(Europe) should be int(round(N(0) * (1 + 0.003784324268)^t)), i.e., growth is r=0.38% per generation
//    N(East Asia) should be int(round(N(0) * (1 + 0.004780219543)^t)), i.e., growth is r=0.48% per generation
78084:79024 early() {
	t = sim.cycle - 78084;
	p2_size = round(1032.1046957333444 * (1 + 0.003784324268)^t); // paper rounds to N(0)=1032 and r=0.0038
	p3_size = round(553.8181989 * (1 + 0.004780219543)^t); // paper rounds to N(0)=554 and r=0.0048
	
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}

78224 late() { // 800 gens from present, introduce beneficial mutation in target population

	// save sim state
	sim.outputFull(tempdir() + "slim_" + simID + ".txt");

	// introduce the beneficial mutation in population
	if (pop == "pop1") {
		target = sample(p1.genomes, 1);
		target.addNewDrawnMutation(m2, 250000); 
		p1.genomes.mutationsOfType(m2).setSelectionCoeff(selCoeff);
		//p2.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
		//p3.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
	} 
	else if (pop == "pop2") { 
		target = sample(p2.genomes, 1);
		target.addNewDrawnMutation(m2, 250000);
		//p1.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
		p2.genomes.mutationsOfType(m2).setSelectionCoeff(selCoeff);
		//p3.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
	}
	else {
		target = sample(p3.genomes, 1); 
		target.addNewDrawnMutation(m2, 250000);
		//p1.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
		//p2.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
		p3.genomes.mutationsOfType(m2).setSelectionCoeff(selCoeff);
	}
	
} 

79024 late() { // restart sim if beneficial mutation is not identified due to low AF in target population
	
	if (selCoeff > 0) {
		if (pop == "pop1") {  
			freq = sim.mutationFrequencies(p1, sim.mutationsOfType(m2));
		}
		else if (pop == "pop2") {
			freq = sim.mutationFrequencies(p2, sim.mutationsOfType(m2));;
		}
		else { 
			freq = sim.mutationFrequencies(p3, sim.mutationsOfType(m2));;
		}
	} 
	
	//print(size(mut));
	if (size(freq) > 0)
	{
		if (freq > threshold) // set according to arbitrary threshold in target population only - current value across all sims is 0.1 
		{
			cat(simID + ": ESTABLISHED\n");
			community.deregisterScriptBlock(self);

			// OUTPUT AND TERMINATE
			// Generation 79024 is the present, i.e., 1 initialize + 73104 burn-in + 5919 evolution

			x = getSeed();
			print("true sim seed: " + x);
			print("AF pop1: " + sim.mutationFrequencies(p1, sim.mutationsOfType(m2)));
			print("AF pop2: " + sim.mutationFrequencies(p2, sim.mutationsOfType(m2)));
			print("AF pop3: " + sim.mutationFrequencies(p3, sim.mutationsOfType(m2)));
			d = p1.sampleIndividuals(N).genomes; 
			e = p2.sampleIndividuals(N).genomes;
			f = p3.sampleIndividuals(N).genomes;
			vec = c(d,e,f);
			vec.outputVCF(filePath = direc + gens + "." + pop + "." + allele_freq + "." + selCoeff + "." + run_name + ".vcf" );
			// vec.outputVCF(filePath= direc + "YRI." + alpha_yri + ".CEU." + alpha_ceu + ".CHB." + alpha_chb + ".SEED." + run_name + ".SS." + N + ".5kya" + ".vcf");
		} else {cat(simID + ": LOST - RESTARTING\n");
		
		// go back to tick where beneficial muts are introduced
		sim.readFromPopulationFile(tempdir() + "slim_" + simID + ".txt");
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^62) - 1));
		
		// re-introduce the sweep mutation

		if (pop == "pop1") {
			target = sample(p1.genomes, 1);
			target.addNewDrawnMutation(m2, 250000); 
			p1.genomes.mutationsOfType(m2).setSelectionCoeff(selCoeff);
			//p2.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
			//p3.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
		} 
		else if (pop == "pop2") { 
			target = sample(p2.genomes, 1);
			target.addNewDrawnMutation(m2, 250000);
			//p1.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
			p2.genomes.mutationsOfType(m2).setSelectionCoeff(selCoeff);
			//p3.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
		}
		else {
			target = sample(p3.genomes, 1); 
			target.addNewDrawnMutation(m2, 250000);
			//p1.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
			//p2.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
			p3.genomes.mutationsOfType(m2).setSelectionCoeff(selCoeff);
		}} 
	}
	else {
		cat(simID + ": LOST - RESTARTING\n");
		
		// go back to tick where beneficial muts are introduced
		sim.readFromPopulationFile(tempdir() + "slim_" + simID + ".txt");
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^62) - 1));
		
		// re-introduce the sweep mutation

		if (pop == "pop1") {
			target = sample(p1.genomes, 1);
			target.addNewDrawnMutation(m2, 250000); 
			p1.genomes.mutationsOfType(m2).setSelectionCoeff(selCoeff);
			//p2.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
			//p3.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
		} 
		else if (pop == "pop2") { 
			target = sample(p2.genomes, 1);
			target.addNewDrawnMutation(m2, 250000);
			//p1.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
			p2.genomes.mutationsOfType(m2).setSelectionCoeff(selCoeff);
			//p3.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
		}
		else {
			target = sample(p3.genomes, 1); 
			target.addNewDrawnMutation(m2, 250000);
			//p1.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
			//p2.genomes.mutationsOfType(m2).setSelectionCoeff(0.0);
			p3.genomes.mutationsOfType(m2).setSelectionCoeff(selCoeff);
		}

	}
}




